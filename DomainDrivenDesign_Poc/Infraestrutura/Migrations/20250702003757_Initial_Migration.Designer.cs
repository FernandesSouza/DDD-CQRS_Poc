// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using DomainDrivenDesign_Poc.Infraestrutura.ORM.Context;

#nullable disable

namespace DomainDrivenDesign_Poc.Infra.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20250702003757_Initial_Migration")]
    partial class Initial_Migration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DomainDrivenDesign_Poc.Business.Domain.Entities.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("expire_date")
                        .HasColumnOrder(8);

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .HasColumnName("number")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("PaidDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("paid_date")
                        .HasColumnOrder(2);

                    b.Property<string>("Payer")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .HasColumnName("payer")
                        .HasColumnOrder(5);

                    b.Property<Guid>("SubscriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("total")
                        .HasColumnOrder(6);

                    b.Property<decimal>("TotalPaid")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("total_paid")
                        .HasColumnOrder(7);

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("Payment", "RichDomain");
                });

            modelBuilder.Entity("DomainDrivenDesign_Poc.Business.Domain.Entities.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasColumnName("full_name")
                        .HasColumnOrder(1);

                    b.HasKey("Id");

                    b.ToTable("Student", "RichDomain");
                });

            modelBuilder.Entity("DomainDrivenDesign_Poc.Business.Domain.Entities.Subscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("create_date")
                        .HasColumnOrder(2);

                    b.Property<DateTime?>("ExpireDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("expire_date")
                        .HasColumnOrder(3);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("isActive")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("last_updateDate")
                        .HasColumnOrder(4);

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("TypeSubscription")
                        .HasColumnType("tinyint")
                        .HasColumnName("subscription_type")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("StudentId")
                        .IsUnique();

                    b.ToTable("Subscription", "RichDomain");
                });

            modelBuilder.Entity("DomainDrivenDesign_Poc.Business.Domain.Entities.Payment", b =>
                {
                    b.HasOne("DomainDrivenDesign_Poc.Business.Domain.Entities.Subscription", "Subscription")
                        .WithMany("Payments")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("DomainDrivenDesign_Poc.Business.Domain.ValueObjects.Document", "Document", b1 =>
                        {
                            b1.Property<Guid>("PaymentId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("varchar(150)")
                                .HasColumnName("document")
                                .HasColumnOrder(4);

                            b1.HasKey("PaymentId");

                            b1.ToTable("Payment", "RichDomain");

                            b1.WithOwner()
                                .HasForeignKey("PaymentId");
                        });

                    b.OwnsOne("DomainDrivenDesign_Poc.Business.Domain.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("PaymentId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("varchar(150)")
                                .HasColumnName("email")
                                .HasColumnOrder(3);

                            b1.HasKey("PaymentId");

                            b1.ToTable("Payment", "RichDomain");

                            b1.WithOwner()
                                .HasForeignKey("PaymentId");
                        });

                    b.Navigation("Document")
                        .IsRequired();

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("DomainDrivenDesign_Poc.Business.Domain.Entities.Student", b =>
                {
                    b.OwnsOne("DomainDrivenDesign_Poc.Business.Domain.ValueObjects.Document", "Document", b1 =>
                        {
                            b1.Property<Guid>("StudentId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("varchar(150)")
                                .HasColumnName("document")
                                .HasColumnOrder(3);

                            b1.HasKey("StudentId");

                            b1.ToTable("Student", "RichDomain");

                            b1.WithOwner()
                                .HasForeignKey("StudentId");
                        });

                    b.OwnsOne("DomainDrivenDesign_Poc.Business.Domain.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("StudentId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("varchar(150)")
                                .HasColumnName("email")
                                .HasColumnOrder(2);

                            b1.HasKey("StudentId");

                            b1.ToTable("Student", "RichDomain");

                            b1.WithOwner()
                                .HasForeignKey("StudentId");
                        });

                    b.Navigation("Document")
                        .IsRequired();

                    b.Navigation("Email")
                        .IsRequired();
                });

            modelBuilder.Entity("DomainDrivenDesign_Poc.Business.Domain.Entities.Subscription", b =>
                {
                    b.HasOne("DomainDrivenDesign_Poc.Business.Domain.Entities.Student", "Student")
                        .WithOne("Subscription")
                        .HasForeignKey("DomainDrivenDesign_Poc.Business.Domain.Entities.Subscription", "StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("DomainDrivenDesign_Poc.Business.Domain.Entities.Student", b =>
                {
                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("DomainDrivenDesign_Poc.Business.Domain.Entities.Subscription", b =>
                {
                    b.Navigation("Payments");
                });
#pragma warning restore 612, 618
        }
    }
}
